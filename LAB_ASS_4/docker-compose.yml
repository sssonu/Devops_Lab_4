version: '3.8'

services:
  # Main Retail Application
  retail-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: retail-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - SPRING_DATASOURCE_URL=jdbc:h2:mem:retaildb
      - SERVER_PORT=8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - retail-network
    restart: unless-stopped
    labels:
      - "com.retail.service=main-app"
      - "com.retail.environment=production"

  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    container_name: retail-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - retail-app
      - retail-app-replica1
      - retail-app-replica2
    networks:
      - retail-network
    restart: unless-stopped
    labels:
      - "com.retail.service=load-balancer"

  # Retail Application Replica 1
  retail-app-replica1:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: retail-app-replica1
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - SPRING_DATASOURCE_URL=jdbc:h2:mem:retaildb
      - SERVER_PORT=8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - retail-network
    restart: unless-stopped
    labels:
      - "com.retail.service=replica-app"
      - "com.retail.replica=1"

  # Retail Application Replica 2
  retail-app-replica2:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: retail-app-replica2
    ports:
      - "8082:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - SPRING_DATASOURCE_URL=jdbc:h2:mem:retaildb
      - SERVER_PORT=8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - retail-network
    restart: unless-stopped
    labels:
      - "com.retail.service=replica-app"
      - "com.retail.replica=2"

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: retail-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - retail-network
    restart: unless-stopped
    labels:
      - "com.retail.service=monitoring"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: retail-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - retail-network
    restart: unless-stopped
    labels:
      - "com.retail.service=visualization"

  # Redis for caching
  redis:
    image: redis:alpine
    container_name: retail-redis
    ports:
      - "6379:6379"
    networks:
      - retail-network
    restart: unless-stopped
    labels:
      - "com.retail.service=cache"

networks:
  retail-network:
    driver: bridge
    name: retail-network

volumes:
  grafana-storage:
    driver: local